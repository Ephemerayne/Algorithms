package patterns

/*
Делегирование - это механизм объектно-ориентированного программирования, при котором один объект передает выполнение
определенного действия или запроса другому объекту. Вместо того чтобы наследовать функциональность от родительского
класса, объект делегирует выполнение этой функциональности другому объекту.
 */

// Интерфейс, который определяет функциональность
interface Printer {
    fun print(message: String)
}

// Класс, реализующий интерфейс Printer
class ConsolePrinter : Printer {
    override fun print(message: String) {
        println("Printing to console: $message")
    }
}

// Класс, использующий делегирование для печати
class User(private val printer: Printer) {
    fun displayMessage(message: String) {
        // Вместо наследования от Printer, объект делегирует выполнение метода print
        printer.print(message)
    }
}

fun main() {
    // Создаем объект ConsolePrinter
    val consolePrinter = ConsolePrinter()

    // Создаем объект User и передаем ему объект ConsolePrinter для делегирования
    val user = User(consolePrinter)

    // Вызываем метод displayMessage, который делегирует выполнение метода print объекту ConsolePrinter
    user.displayMessage("Hello, World!")
}

/*
В данном примере:

Printer - интерфейс, определяющий функцию print.
ConsolePrinter - класс, реализующий интерфейс Printer и предоставляющий реализацию функции print для вывода на консоль.
User - класс, который использует делегирование. Вместо того чтобы наследовать от Printer, User принимает объект типа
Printer в конструкторе и делегирует вызов метода print этому объекту.
Делегирование позволяет достичь гибкости и композиции в коде. Вместо жесткой связанности с родительским классом через
наследование, объект может взаимодействовать с различными объектами, реализующими один и тот же интерфейс
(в данном случае, Printer).
 */