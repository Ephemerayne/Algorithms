package patterns

/*
Паттерн "Callback" является паттерном проектирования, который реализует механизм обратного вызова (Callback).
Этот паттерн позволяет передавать функцию (или объект с методом) в качестве аргумента другой функции, чтобы та могла
вызвать переданный код в определенный момент времени. Обратные вызовы часто используются в асинхронном программировании,
обработке событий и других сценариях.
 */

// Интерфейс для обратного вызова
interface Callback {
    fun onComplete(result: String)
}

// Класс, который выполняет асинхронную задачу и использует обратный вызов
class AsyncTask {
    fun execute(callback: Callback) {
        // Имитация асинхронной задачи (например, загрузка данных из сети)
        Thread {
            Thread.sleep(2000) // Имитация задержки
            val result = "Task completed"
            callback.onComplete(result)
        }.start()
    }
}

fun main() {
    // Создаем экземпляр AsyncTask
    val asyncTask = AsyncTask()

    // Запускаем асинхронную задачу с использованием Callback
    asyncTask.execute(object : Callback {
        override fun onComplete(result: String) {
            println(result)
        }
    })

    println("Main thread continues executing...")
    // Время, когда асинхронная задача выполняется в фоновом потоке
}

/*
В данном примере:

Callback - это интерфейс, определяющий метод onComplete, который будет вызван после завершения асинхронной задачи.
AsyncTask - это класс, который выполняет асинхронную задачу. В методе execute передается объект, реализующий интерфейс
Callback, и метод onComplete вызывается после завершения задачи.
Паттерн "Callback" обеспечивает гибкость, позволяя клиентам передавать различные обратные вызовы для обработки результатов
или событий в определенный момент времени.
 */