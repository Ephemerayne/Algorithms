package patterns

/*
Паттерн "Состояние" (State) позволяет объекту изменять свое поведение при изменении своего внутреннего состояния.
Этот паттерн представляет собой объект, который может находиться в различных состояниях, и внешний код может изменять
его поведение, изменяя его текущее состояние.
 */

// Интерфейс состояния
interface State {
    fun handle()
}

// Конкретные реализации состояний
class ConcreteStateA : State {
    override fun handle() {
        println("Handling request in State A")
    }
}

class ConcreteStateB : State {
    override fun handle() {
        println("Handling request in State B")
    }
}

// Контекст, который использует состояния
class Context(var state: State) {
    fun request() {
        state.handle()
    }

    // Метод для изменения состояния
    fun changeState(newState: State) {
        state = newState
    }
}

// Пример использования


fun main() {
// Создаем объекты состояний
    val stateA = ConcreteStateA()
    val stateB = ConcreteStateB()

// Создаем контекст и устанавливаем начальное состояние
    val context = Context(stateA)

// Вызываем метод, который делает запрос
    context.request()

// Меняем состояние и вызываем метод еще раз
    context.changeState(stateB)
    context.request()
}

/*
В данном примере:

State - интерфейс, определяющий метод handle, который будет вызываться при запросе.
ConcreteStateA и ConcreteStateB - конкретные реализации состояний.
Context - объект контекста, который хранит текущее состояние и делегирует выполнение запроса этому состоянию.

Также предоставляет метод changeState для изменения текущего состояния.
Этот паттерн позволяет объекту менять своё поведение в зависимости от его внутреннего состояния. Это делает его полезным,
например, для реализации конечных автоматов, где объект может находиться в различных состояниях и реагировать на внешние
события в зависимости от текущего состояния.
 */