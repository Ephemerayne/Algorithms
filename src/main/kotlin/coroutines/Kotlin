
_______________________Null Safety__________________________________

Null Safety: Kotlin предназначен для устранения проблемы NullPointerException (NPE), которая часто встречается в
Java. В Kotlin типы по умолчанию не допускают значения null. То есть, если у вас есть переменная типа String, она
не может быть null. Чтобы переменная могла принимать null, ее нужно явно объявить как нулабельную, добавив вопросительный
знак к типу (String?).

Обработка null значений: Kotlin предоставляет несколько способов безопасной работы с потенциально нулабельными значениями:

Использование условий (if): Проверка на null перед использованием переменной.
Безопасный вызов (?.): Позволяет безопасно вызвать метод на переменной, которая может быть null.
Если переменная null, то весь вызов возвращает null.
Элвис оператор (?:): Позволяет предоставить альтернативное значение в случае, если переменная null.
Принудительный вызов (!!): Это оператор, который принудительно преобразует любой тип к ненулабельному типу, игнорируя
проверку на null. Это может привести к NPE, если переменная будет null.
Преимущества: Главное преимущество этой системы - уменьшение вероятности возникновения NPE в runtime, так как большинство
проблем с null обнаруживается на этапе компиляции. Это делает код более надежным и устойчивым к ошибкам.

Концепция null safety в Kotlin значительно улучшает безопасность и надежность кода, позволяя разработчикам писать более
чистый и устойчивый код.

_______________________Null Safety__________________________________
